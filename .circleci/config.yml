version: 2.1

orbs:
  slack: circleci/slack@4.9.3

commands:
  install_awscli:
    description: install aws cli v2
    steps:
      - run:
          name: install aws cli v2
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt update  
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: udapeopleci
          template: basic_fail_1
  install_nodejs:
    description: install nodejs 13
    steps:
      - run:
          name: install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_ID >>
            aws s3 rm s3://udapeople-<< parameters.workflow_ID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_ID >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_ID:
        type: string
        default: ${CIRCL_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.workflow_ID >>)
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
              
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end unit test
          command: |
            cd frontend
            npm install
            npm run test
      - notify_on_failure

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end unit test
          command: |
            cd backend
            npm install
            npm run test
      - notify_on_failure

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=crtical
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            # npm audit --audit-level=crtical
      - notify_on_failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force --audit-level=crtical
            npm audit fix --force --audit-level=crtical
            # npm audit --audit-level=crtical
      - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["04:9a:cb:3e:cf:70:e2:6e:a0:21:b7:c5:1e:20:24:76"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ./backend/migrations_dump.txt
            then
              echo "Invoking KVDB"
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment
      - revert-migrations

      # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["04:9a:cb:3e:cf:70:e2:6e:a0:21:b7:c5:1e:20:24:76"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: package backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  #     # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: backend smoke test
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo $BACKEND_PUBLIC_IP
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: frontend smoke test
          command: |
            FRONTEND_WEBSITE="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${FRONTEND_WEBSITE}
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
  #     # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: save old workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo "Old workflow ID: ${OLD_WORKFLOW_ID}"
            curl http://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                      --template-file .circleci/files/cloudfront.yml \
                      --stack-name InitialStack \
                      --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                      --tags project=udapeople
      - destroy-environment
      - revert-migrations
  #     # Here's where you will add some code to rollback on failure

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: remove old stacks and files
          command: |
            export STAKS=($(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filters CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: udapeopleci
          template: success_tagged_deployment_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]














# version: 2.1

# commands:
#   install_awscli:
#     description: Install AWS CLI
#     steps:
#      - run:
#          name: Install AWS CLI
#          command: |
#            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#            unzip awscliv2.zip
#            sudo ./aws/install

#   install_nodejs:
#     description: Install Node.js 13
#     steps:
#      - run:
#          name: Install Node.js 13
#          command: |
#            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
#            sudo apt install -y nodejs
                    
#   install_ansible:
#     description: install Ansible
#     steps:
#      - run:
#          name: Install Ansible
#          command: |
#            sudo apt update
#            sudo apt install software-properties-common -y
#            sudo add-apt-repository --yes --update ppa:ansible/ansible
#            sudo apt install ansible -y

#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here 
#       workflow_id:
#         default: "${CIRCLE_WORKFLOW_ID:0:7}"
#         type: string

#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
#             aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
#             aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here
#       workflow_id:
#         default: "${CIRCLE_WORKFLOW_ID:0:7}"
#         type: string     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           when: on_fail
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS=$(curl --insecure "https://kvdb.io/GihzLn9tKaS8UmwtTTnRhb/migration_<<parameters.workflow_id>>")
#             if(( $SUCCESS==1 )); 
#             then
#                cd ~/project/backend
#                npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#                npm run migrations:revert

#               exit 1
#             fi
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Build front-end
#           command: |
#             # Your code here
#             cd frontend
#             npm install
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Back-end build
#           command: |
#              # Your code here
#              cd backend
#              npm install
#              npm run build
             
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

#   test-frontend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [frontend-test]
#       # Your job code here
#       - run:
#           name: Frontend test
#           command: |
#              # Your code here
#              cd frontend
#              npm install
#              npm run test
             
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-test

     
                
#   test-backend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [backend-test]
#       # Your job code here
#       - run:
#           name: Backend test
#           command: |
#              # Your code here
#              cd backend
#              npm install
#              npm run test
             
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-test
            
#   scan-frontend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [frontend-scan]
#       # Your job code here
#       - run:
#           name: Frontend scan
#           command: |
          
#              cd frontend
#              npm install
#              npm audit fix --audit-level-critical --force
#              npm audit fix --audit-level-critical --force
            
            
             
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-scan

#   scan-backend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [backend-scan]
#       # Your job code here
#       - run:
#           name: Backend scan
#           command: |
#              # Your code here
#              cd backend
#              npm install
#              # npm install oauth-sign@^0.9.0
#              npm audit fix --audit-level-critical --force
#              npm audit fix --audit-level-critical --force
                       
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-scan

#   deploy-infrastructure:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: amazon/aws-cli
      
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#                yum install -y tar gzip   

    
     
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#               aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides \
#                   ID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags \
#                   project=udapeople

     
#       - run:
#             name: Ensure front-end infrastructure exist
#             command: |
#               aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides \
#                   ID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags \
#                   project=udapeople
       
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
          
#               cd .circleci/ansible
#               cat inventory.txt
#               aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
#               cat inventory.txt

#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure      

#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#       - image: cimg/base:stable
#     steps:
#       # Checkout code from git
#       - checkout
#       # Add ssh keys with fingerprint
#       - add_ssh_keys:
#           fingerprints:
#             - "04:9a:cb:3e:cf:70:e2:6e:a0:21:b7:c5:1e:20:24:76"    
#       # attach workspace
#       - attach_workspace:  
#           at: ~/
#       - install_ansible
#       - run:
#           name: Configure server
#           command: |
            
#             cd .circleci/ansible
#             cat inventory.txt
#             ansible-playbook -i inventory.txt configure-server.yml      
#       # Here's where you will add some code to rollback on failure 
#       - destroy-environment     

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             cd backend
#             npm install
#             npm run migrations > migrations_dump.txt
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#             then
#              curl --insecure https://kvdb.io/DbZoajknREbJduuQG2eHZs/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
#             fi
           
#      # Here's where you will add some code to rollback on failure   
#       - destroy-environment
#       - revert-migrations     

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: cimg/base:stable
#     steps:
#       # Checkout code from git
#       - checkout
#       - install_nodejs
#       - install_awscli
#       - install_ansible 

#       - add_ssh_keys:
#           fingerprints:
#             - "04:9a:cb:3e:cf:70:e2:6e:a0:21:b7:c5:1e:20:24:76"
#       # attach workspace
#       - attach_workspace:  
#           at: ~/   
     
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export BACKEND_IP=$(aws ec2 describe-instances \
#             --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
#             --output text
#             )
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "API_URL = ${API_URL}"
#             echo API_URL = "http://${BACKEND_IP}:3030" >> frontend/.env
#             cat frontend/.env
#       - run:
#           name: Deploy frontend objects
#           command: |
#             cd frontend
#             sudo npm install -g npm@latest
#             rm -rf node_modules
#             npm install
#             npm run build
#             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment
#       - revert-migrations    
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#       - image: cimg/base:stable
#     steps:
#       # Checkout code from git
#       - checkout
#       - install_nodejs
#       - install_awscli
#       - install_ansible  
#       # Add ssh keys with fingerprint
#       - add_ssh_keys:
#           fingerprints:
#             - "04:9a:cb:3e:cf:70:e2:6e:a0:21:b7:c5:1e:20:24:76"
#       # attach workspace
#       - attach_workspace:  
#           at: ~/

#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#             cd backend
#             npm i
#             npm run build
#             cd ..
#             cd .circleci/ansible
#             mkdir files
#             cd files
#             tar -C ../../../backend -czvf artifact.tar.gz .
#             cd ../
#             echo "Contents of the inventory.txt file is ------"
#             cat inventory.txt
#             ansible-playbook -i inventory.txt deploy-backend.yml
  
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment
#       - revert-migrations
      
#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#        - image: cimg/base:stable
#     steps:
#       # Checkout code from git
#       - checkout
#       - install_nodejs
#       - install_awscli
      
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#              --query 'Reservations[*].Instances[*].PublicIpAddress' \
#              --output text)
#             export API_URL=http://${BACKEND_PUBLIC_IP}:3030
#             echo ${BACKEND_PUBLIC_IP}
#             echo backend-${CIRCLE_WORKFLOW_ID:0:7}
#             echo ${API_URL}
#             if curl -s $API_URL/api/status | grep "ok"
#             then
#               exit 0
#             else
#               exit 1
#             fi 
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#             FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
#             echo $FRONTEND_WEBSITE
#             if curl -s $FRONTEND_WEBSITE | grep "Welcome"
#             then
#               exit 0
#             else
#               exit 1
#             fi
#       # Here's where you will add some code to rollback on failure 
#       - destroy-environment
#       - revert-migrations 

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Install dep / Save Old Workflow ID to kvdb.io
#           command: |
#             export OLD_WORKFLOW_ID=$(aws cloudformation \
#             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#             --no-paginate --output text)
#             echo "Old workflow ID: ${OLD_WORKFLOW_ID}"
#             curl https://kvdb.io/DbZoajknREbJduuQG2eHZs/old_workflow_id -d "${OLD_WORKFLOW_ID}"
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/cloudfront.yml \
#             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#             --stack-name InitialStack
#       - destroy-environment
#       - revert-migrations

#       # Here's where you will add some code to rollback on failure  

# # cleanup:
# #     docker:
# #       # Docker image here
# #     steps:
# #       # Checkout code from git
# #       - run:
# #           name: Get old stack workflow id
# #           command: |
# #             # your code here
# #             export OldWorkflowID="the id here"
# #             export STACKS=[] #put the list of stacks here
# #       - run:
# #           name: Remove old stacks and files
# #           command: |
# #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
# #             then
# #               # your code here
# #             fi
            

# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [master]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       # - cleanup:
#       #     requires: [cloudfront-update]